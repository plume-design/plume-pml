/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: wbm.proto */

#ifndef PROTOBUF_C_wbm_2eproto__INCLUDED
#define PROTOBUF_C_wbm_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1002001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _Wbm__WifiBlastResult Wbm__WifiBlastResult;
typedef struct _Wbm__WifiBlastResult__HealthMetrics Wbm__WifiBlastResult__HealthMetrics;
typedef struct _Wbm__WifiBlastResult__HealthMetrics__LoadAvg Wbm__WifiBlastResult__HealthMetrics__LoadAvg;
typedef struct _Wbm__WifiBlastResult__RadioMetrics Wbm__WifiBlastResult__RadioMetrics;
typedef struct _Wbm__WifiBlastResult__DeviceMetrics Wbm__WifiBlastResult__DeviceMetrics;
typedef struct _Wbm__WifiBlastResult__Status Wbm__WifiBlastResult__Status;


/* --- enums --- */

typedef enum _Wbm__RadioBandType {
  WBM__RADIO_BAND_TYPE__BAND_UNKNOWN = 0,
  WBM__RADIO_BAND_TYPE__BAND2G = 1,
  WBM__RADIO_BAND_TYPE__BAND5G = 2,
  WBM__RADIO_BAND_TYPE__BAND5GL = 3,
  WBM__RADIO_BAND_TYPE__BAND5GU = 4
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(WBM__RADIO_BAND_TYPE)
} Wbm__RadioBandType;
typedef enum _Wbm__WiFiStandard {
  WBM__WI_FI_STANDARD__WIFI_STD_UNKNOWN = 0,
  WBM__WI_FI_STANDARD__WIFI_STD_80211_A = 1,
  WBM__WI_FI_STANDARD__WIFI_STD_80211_B = 2,
  WBM__WI_FI_STANDARD__WIFI_STD_80211_G = 3,
  WBM__WI_FI_STANDARD__WIFI_STD_80211_N = 4,
  WBM__WI_FI_STANDARD__WIFI_STD_80211_AC = 5,
  WBM__WI_FI_STANDARD__WIFI_STD_80211_AX = 6
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(WBM__WI_FI_STANDARD)
} Wbm__WiFiStandard;
typedef enum _Wbm__ChanWidth {
  WBM__CHAN_WIDTH__CHAN_WIDTH_UNKNOWN = 0,
  WBM__CHAN_WIDTH__CHAN_WIDTH_20MHZ = 1,
  WBM__CHAN_WIDTH__CHAN_WIDTH_40MHZ = 2,
  WBM__CHAN_WIDTH__CHAN_WIDTH_40MHZ_ABOVE = 3,
  WBM__CHAN_WIDTH__CHAN_WIDTH_40MHZ_BELOW = 4,
  WBM__CHAN_WIDTH__CHAN_WIDTH_80MHZ = 5,
  WBM__CHAN_WIDTH__CHAN_WIDTH_160MHZ = 6,
  WBM__CHAN_WIDTH__CHAN_WIDTH_80_PLUS_80MHZ = 7
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(WBM__CHAN_WIDTH)
} Wbm__ChanWidth;
typedef enum _Wbm__ResultCode {
  WBM__RESULT_CODE__RESULT_CODE_UNDEFINED = 0,
  WBM__RESULT_CODE__RESULT_CODE_SUCCEED = 1,
  WBM__RESULT_CODE__RESULT_CODE_ERROR = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(WBM__RESULT_CODE)
} Wbm__ResultCode;

/* --- messages --- */

struct  _Wbm__WifiBlastResult__HealthMetrics__LoadAvg
{
  ProtobufCMessage base;
  protobuf_c_boolean has_one;
  double one;
  protobuf_c_boolean has_five;
  double five;
  protobuf_c_boolean has_fifteen;
  double fifteen;
};
#define WBM__WIFI_BLAST_RESULT__HEALTH_METRICS__LOAD_AVG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&wbm__wifi_blast_result__health_metrics__load_avg__descriptor) \
    , 0,0, 0,0, 0,0 }


struct  _Wbm__WifiBlastResult__HealthMetrics
{
  ProtobufCMessage base;
  protobuf_c_boolean has_cpu_util;
  uint32_t cpu_util;
  protobuf_c_boolean has_mem_util;
  uint32_t mem_util;
  Wbm__WifiBlastResult__HealthMetrics__LoadAvg *load_avg;
};
#define WBM__WIFI_BLAST_RESULT__HEALTH_METRICS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&wbm__wifi_blast_result__health_metrics__descriptor) \
    , 0,0, 0,0, NULL }


struct  _Wbm__WifiBlastResult__RadioMetrics
{
  ProtobufCMessage base;
  protobuf_c_boolean has_noise_floor;
  int32_t noise_floor;
  protobuf_c_boolean has_channel_utilization;
  uint32_t channel_utilization;
  protobuf_c_boolean has_activity_factor;
  uint32_t activity_factor;
  protobuf_c_boolean has_carriersense_threshold_exceeded;
  uint32_t carriersense_threshold_exceeded;
  protobuf_c_boolean has_channel;
  uint32_t channel;
  protobuf_c_boolean has_wifi_standard;
  Wbm__WiFiStandard wifi_standard;
  protobuf_c_boolean has_chan_width;
  Wbm__ChanWidth chan_width;
  protobuf_c_boolean has_radio_band;
  Wbm__RadioBandType radio_band;
};
#define WBM__WIFI_BLAST_RESULT__RADIO_METRICS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&wbm__wifi_blast_result__radio_metrics__descriptor) \
    , 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0 }


struct  _Wbm__WifiBlastResult__DeviceMetrics
{
  ProtobufCMessage base;
  char *client_mac;
  protobuf_c_boolean has_rssi;
  int32_t rssi;
  protobuf_c_boolean has_tx_phyrate;
  uint32_t tx_phyrate;
  protobuf_c_boolean has_rx_phyrate;
  uint32_t rx_phyrate;
  protobuf_c_boolean has_snr;
  int32_t snr;
  size_t n_throughput_samples;
  double *throughput_samples;
  size_t n_tx_packet_retransmissions;
  uint64_t *tx_packet_retransmissions;
};
#define WBM__WIFI_BLAST_RESULT__DEVICE_METRICS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&wbm__wifi_blast_result__device_metrics__descriptor) \
    , NULL, 0,0, 0,0, 0,0, 0,0, 0,NULL, 0,NULL }


struct  _Wbm__WifiBlastResult__Status
{
  ProtobufCMessage base;
  Wbm__ResultCode code;
  char *description;
};
#define WBM__WIFI_BLAST_RESULT__STATUS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&wbm__wifi_blast_result__status__descriptor) \
    , 0, NULL }


/*
 * //////////////////////////////////////////////////////////////////////////////////////////////////
 * WifiBlastResult                              : Contains Health, Radio and Device metrics
 * - time_stamp                                 : Time since epoch, UTC TZ in milliseconds
 * - plan_id                                    : Plan ID this result corresponds to
 * - step_id                                    : Step ID this result corresponds to
 * - HealthMetrics                              : Pod Health/Macrostate metrics
 *      - cpu_util                              : CPU utilization percentage
 *      - mem_util                              : Memory utilization in KB
 *      - load_avg                              : System load for periods: 1, 5 and 15 minutes
 * - RadioMetrics                               : Metrics for current radio
 *      - noise_floor_dbm                       : The noise floor in dBm
 *      - channel_utilization                   : Percentage of time the channel was occupied
 *      - activity_factor                       : Percentage of time the channel was occupied due
 *                                                to its own activity
 *      - carriersense_threshold_exceeded       : Percentage of time that the radio was unable
 *                                                to transmit or receive WiFi packets (interference)
 *      - channel                               : Current channel in use
 *      - wifi_standard                         : 802.11 WiFi standard
 *      - chan_width                            : Current operating channel width
 *      - radio_band                            : Radio band in use
 * - DeviceMetrics                              : Metrics for each device blasted
 *      - client_mac                            : MAC address
 *      - rssi                                  : RSSI (Received Signal Strength Indicator)
 *      - tx_phyrate                            : Tx PHY rate in Mbps
 *      - rx_Phyrate                            : Rx PHY rate in Mbps
 *      - snr                                   : Uplink Signal to Noise Ratio
 *      - throughput_samples                    : Array of calculated throughput in Mbps
 *      - tx_packet_retransmissions             : Array of retransmitted packets numbers
 * - Status                                     : Final status of the blast request
 *      - code                                  : Status code
 *      - description                           : Detailed description as a string
 * //////////////////////////////////////////////////////////////////////////////////////////////////
 */
struct  _Wbm__WifiBlastResult
{
  ProtobufCMessage base;
  protobuf_c_boolean has_time_stamp;
  uint64_t time_stamp;
  char *plan_id;
  protobuf_c_boolean has_step_id;
  uint32_t step_id;
  Wbm__WifiBlastResult__HealthMetrics *health_metrics;
  Wbm__WifiBlastResult__RadioMetrics *radio_metrics;
  Wbm__WifiBlastResult__DeviceMetrics *device_metrics;
  Wbm__WifiBlastResult__Status *status;
};
#define WBM__WIFI_BLAST_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&wbm__wifi_blast_result__descriptor) \
    , 0,0, NULL, 0,0, NULL, NULL, NULL, NULL }


/* Wbm__WifiBlastResult__HealthMetrics__LoadAvg methods */
void   wbm__wifi_blast_result__health_metrics__load_avg__init
                     (Wbm__WifiBlastResult__HealthMetrics__LoadAvg         *message);
/* Wbm__WifiBlastResult__HealthMetrics methods */
void   wbm__wifi_blast_result__health_metrics__init
                     (Wbm__WifiBlastResult__HealthMetrics         *message);
/* Wbm__WifiBlastResult__RadioMetrics methods */
void   wbm__wifi_blast_result__radio_metrics__init
                     (Wbm__WifiBlastResult__RadioMetrics         *message);
/* Wbm__WifiBlastResult__DeviceMetrics methods */
void   wbm__wifi_blast_result__device_metrics__init
                     (Wbm__WifiBlastResult__DeviceMetrics         *message);
/* Wbm__WifiBlastResult__Status methods */
void   wbm__wifi_blast_result__status__init
                     (Wbm__WifiBlastResult__Status         *message);
/* Wbm__WifiBlastResult methods */
void   wbm__wifi_blast_result__init
                     (Wbm__WifiBlastResult         *message);
size_t wbm__wifi_blast_result__get_packed_size
                     (const Wbm__WifiBlastResult   *message);
size_t wbm__wifi_blast_result__pack
                     (const Wbm__WifiBlastResult   *message,
                      uint8_t             *out);
size_t wbm__wifi_blast_result__pack_to_buffer
                     (const Wbm__WifiBlastResult   *message,
                      ProtobufCBuffer     *buffer);
Wbm__WifiBlastResult *
       wbm__wifi_blast_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   wbm__wifi_blast_result__free_unpacked
                     (Wbm__WifiBlastResult *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Wbm__WifiBlastResult__HealthMetrics__LoadAvg_Closure)
                 (const Wbm__WifiBlastResult__HealthMetrics__LoadAvg *message,
                  void *closure_data);
typedef void (*Wbm__WifiBlastResult__HealthMetrics_Closure)
                 (const Wbm__WifiBlastResult__HealthMetrics *message,
                  void *closure_data);
typedef void (*Wbm__WifiBlastResult__RadioMetrics_Closure)
                 (const Wbm__WifiBlastResult__RadioMetrics *message,
                  void *closure_data);
typedef void (*Wbm__WifiBlastResult__DeviceMetrics_Closure)
                 (const Wbm__WifiBlastResult__DeviceMetrics *message,
                  void *closure_data);
typedef void (*Wbm__WifiBlastResult__Status_Closure)
                 (const Wbm__WifiBlastResult__Status *message,
                  void *closure_data);
typedef void (*Wbm__WifiBlastResult_Closure)
                 (const Wbm__WifiBlastResult *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    wbm__radio_band_type__descriptor;
extern const ProtobufCEnumDescriptor    wbm__wi_fi_standard__descriptor;
extern const ProtobufCEnumDescriptor    wbm__chan_width__descriptor;
extern const ProtobufCEnumDescriptor    wbm__result_code__descriptor;
extern const ProtobufCMessageDescriptor wbm__wifi_blast_result__descriptor;
extern const ProtobufCMessageDescriptor wbm__wifi_blast_result__health_metrics__descriptor;
extern const ProtobufCMessageDescriptor wbm__wifi_blast_result__health_metrics__load_avg__descriptor;
extern const ProtobufCMessageDescriptor wbm__wifi_blast_result__radio_metrics__descriptor;
extern const ProtobufCMessageDescriptor wbm__wifi_blast_result__device_metrics__descriptor;
extern const ProtobufCMessageDescriptor wbm__wifi_blast_result__status__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_wbm_2eproto__INCLUDED */
